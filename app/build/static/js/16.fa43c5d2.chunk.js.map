{"version":3,"sources":["components/Client/ProjectItem.js","components/Client/Chart/Chart.js","components/Client/Chart/Chart2.js","components/Client/Chart/Chart3.js","components/Client/Client.js"],"names":["ProjectItem","project","navigate","useNavigate","onClick","id","className","name","ChartJS","register","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","options","maintainAspectRatio","responsive","plugins","legend","position","title","display","text","labels","data","datasets","label","map","faker","datatype","number","min","max","backgroundColor","Chart","width","PointElement","LineElement","borderColor","Chart2","ArcElement","borderWidth","Chart3","Client","React","useContext","Context","currentClient","setCurrentClient","user","useState","nameInput","setNameInput","open","setOpen","useParams","dataClient","useQuery","FIND_CLIENT_BY_ID","variables","onCompleted","findClientById","FIND_PROJECTS_BY_CLIENT_ID","clientId","userId","refetch","loading","useMutation","CREATE_PROJECT","createProject","checked","setChecked","useEffect","document","getElementById","innerHTML","submit","e","a","preventDefault","idParams","toast","warning","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","contributors","resp","success","newProjectId","error","setTimeout","style","flexGrow","alignItems","justifyContent","Progress","findProjectsByClientId","length","i","Button","marginTop","Modal","onSubmit","autoFocus","value","placeholder","onChange","target","CheckBox","gap","type","height","reversed","to"],"mappings":"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","file":"static/js/16.fa43c5d2.chunk.js","sourcesContent":["import \"./Client.scss\";\nimport { useNavigate } from \"react-router\";\n\nconst ProjectItem = ({ project }) => {\n  const navigate = useNavigate();\n  return (\n    <div\n      onClick={() => {\n        navigate(`/project/${project?.id}/global`);\n      }}\n      className={\"project__item\"}\n    >\n      <div className={\"project__item__name__container\"}>\n        <p>{project?.name}</p>\n      </div>\n      <i className=\"gg-chevron-right\"></i>\n    </div>\n  );\n};\n\nexport default ProjectItem;\n","import React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\nimport faker from \"faker\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  maintainAspectRatio: false,\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: true,\n      text: \"Chart.js Bar Chart\",\n    },\n  },\n};\n\nconst labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\n\nexport const data = {\n  labels,\n  datasets: [\n    {\n      label: \"Dataset 1\",\n      data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n    },\n    {\n      label: \"Dataset 2\",\n      data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n    },\n  ],\n};\n\nexport default function Chart() {\n  return <Bar options={options} data={data} width={400} />;\n}\n","import React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\nimport faker from \"faker\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  maintainAspectRatio: false,\n  responsive: true,\n  plugins: {\n    legend: {\n      position: \"top\",\n    },\n    title: {\n      display: true,\n      text: \"Chart.js Line Chart\",\n    },\n  },\n};\n\nconst labels = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\"];\n\nexport const data = {\n  labels,\n  datasets: [\n    {\n      label: \"Dataset 1\",\n      data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n      borderColor: \"rgb(255, 99, 132)\",\n      backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n    },\n    {\n      label: \"Dataset 2\",\n      data: labels.map(() => faker.datatype.number({ min: -1000, max: 1000 })),\n      borderColor: \"rgb(53, 162, 235)\",\n      backgroundColor: \"rgba(53, 162, 235, 0.5)\",\n    },\n  ],\n};\n\nexport function Chart2() {\n  return <Line options={options} data={data} width={400} />;\n}\n","import React from \"react\";\nimport { Chart as ChartJS, ArcElement, Tooltip, Legend } from \"chart.js\";\nimport { Pie } from \"react-chartjs-2\";\n\nChartJS.register(ArcElement, Tooltip, Legend);\n\nexport const data = {\n  labels: [\"Red\", \"Blue\", \"Yellow\", \"Green\", \"Purple\", \"Orange\"],\n  datasets: [\n    {\n      label: \"# of Votes\",\n      data: [12, 19, 3, 5, 2, 3],\n      backgroundColor: [\n        \"rgba(255, 99, 132, 0.2)\",\n        \"rgba(54, 162, 235, 0.2)\",\n        \"rgba(255, 206, 86, 0.2)\",\n        \"rgba(75, 192, 192, 0.2)\",\n        \"rgba(153, 102, 255, 0.2)\",\n        \"rgba(255, 159, 64, 0.2)\",\n      ],\n      borderColor: [\n        \"rgba(255, 99, 132, 1)\",\n        \"rgba(54, 162, 235, 1)\",\n        \"rgba(255, 206, 86, 1)\",\n        \"rgba(75, 192, 192, 1)\",\n        \"rgba(153, 102, 255, 1)\",\n        \"rgba(255, 159, 64, 1)\",\n      ],\n      borderWidth: 1,\n    },\n  ],\n};\n\nexport function Chart3() {\n  return <Pie data={data} />;\n}\n","import React from \"react\";\nimport { Context } from \"../Context/Context\";\nimport { useParams } from \"react-router\";\nimport Progress from \"../../materials/Progress/Progress\";\nimport ProjectItem from \"./ProjectItem\";\nimport Button from \"../../materials/Button/Button\";\nimport CheckBox from \"../../materials/CheckBox/CheckBox\";\nimport { useNavigate } from \"react-router\";\nimport \"./Client.scss\";\nimport {\n  FIND_CLIENT_BY_ID,\n  FIND_PROJECTS_BY_CLIENT_ID,\n} from \"../../graphql/queries\";\nimport { CREATE_PROJECT } from \"../../graphql/mutations\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport Modal from \"../../materials/Modal/Modal\";\nimport { toast } from \"react-toastify\";\nimport { Navigate } from \"react-router\";\nimport Chart from \"./Chart/Chart\";\nimport { Chart2 } from \"./Chart/Chart2\";\nimport { Chart3 } from \"./Chart/Chart3\";\nconst Client = () => {\n  const { currentClient, setCurrentClient, user } = React.useContext(Context);\n  const [nameInput, setNameInput] = React.useState(\"\");\n  const [open, setOpen] = React.useState(false);\n  const navigate = useNavigate();\n  const { id } = useParams();\n  const dataClient = useQuery(FIND_CLIENT_BY_ID, {\n    variables: { id: id },\n    onCompleted: (data) => {\n      setCurrentClient(data?.findClientById);\n    },\n  });\n  const { data, refetch, loading } = useQuery(FIND_PROJECTS_BY_CLIENT_ID, {\n    variables: { clientId: id, userId: user?.id },\n  });\n  const [createProject] = useMutation(CREATE_PROJECT);\n  const [checked, setChecked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (currentClient) {\n      const title = document.getElementById(\"title\");\n      title.innerHTML = `${currentClient?.name} | Kifekoi`;\n    }\n  }, [currentClient?.name, currentClient]);\n  const submit = async (e) => {\n    e.preventDefault();\n    try {\n      const idParams = id;\n      if (nameInput === \"\") {\n        return toast.warning(`Le projet doit avoir un nom.`, {\n          position: \"bottom-left\",\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: false,\n          draggable: false,\n          progress: undefined,\n        });\n      }\n      const contributors = [user.id];\n      const resp = await createProject({\n        variables: {\n          name: nameInput,\n          clientId: idParams,\n          contributors: contributors,\n        },\n      });\n      toast.success(`${nameInput} a été créé pour ${currentClient?.name}.`, {\n        position: \"bottom-left\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined,\n      });\n      if (checked) {\n        const newProjectId = resp.data.createProject.id;\n        navigate(`/project/${newProjectId}`);\n      }\n    } catch (err) {\n      toast.error(`Impossible de créer le projet.`, {\n        position: \"bottom-left\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: false,\n        draggable: false,\n        progress: undefined,\n      });\n    }\n    setTimeout(() => {\n      refetch();\n    }, 200);\n    setNameInput(\"\");\n    setOpen(false);\n  };\n  if (!dataClient.data && !dataClient.loading) {\n    return <Navigate to=\"/404\" />;\n  }\n  if (loading)\n    return (\n      <div\n        style={{\n          flexGrow: 1,\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n        }}\n      >\n        <Progress />\n      </div>\n    );\n  return (\n    <div className=\"client\">\n      <div className={\"client__container\"}>\n        <div className={\"client__projects__container\"}>\n          <h1 className={\"client__projects__container__title\"}>\n            {currentClient?.name} - Projets\n          </h1>\n          <div className={\"client__projects__container__spacer\"} />\n          <div className=\"client__projects__container__list\">\n            {data?.findProjectsByClientId?.length === 0 && (\n              <h4 className={\"client__projects__container__title\"}>\n                Aucun projet.\n              </h4>\n            )}\n            {data?.findProjectsByClientId?.length !== 0 &&\n              data?.findProjectsByClientId?.map((project, i) => (\n                <ProjectItem key={i} project={project} />\n              ))}\n          </div>\n        </div>\n        <div className=\"client__new__clients__container\">\n          <h1 className={\"client__projects__container__title\"}>\n            Nouveau projet\n          </h1>\n          <div className={\"client__projects__container__spacer\"} />\n          <Button onClick={() => setOpen(true)} style={{ marginTop: \"10px\" }}>\n            Créer un nouveau projet +\n          </Button>\n        </div>\n        <Modal open={open} setOpen={setOpen} onSubmit={submit}>\n          <form className=\"modal__content__container\">\n            <input\n              autoFocus\n              className=\"name__input medium__title__textarea\"\n              value={nameInput}\n              placeholder={`Comment s'appelle le projet ?`}\n              onChange={(e) => setNameInput(e.target.value)}\n            />{\" \"}\n            <div className=\"checkbox__container\">\n              <CheckBox checked={checked} setChecked={setChecked} />{\" \"}\n              <span>Aller sur la page projet après la création</span>\n            </div>\n            <div style={{ display: \"flex\", gap: \"6px\" }}>\n              <Button\n                type={\"button\"}\n                style={{ height: \"30px\" }}\n                reversed\n                onClick={() => setOpen(false)}\n              >\n                Annuler\n              </Button>\n              <Button\n                style={{ height: \"30px\" }}\n                onClick={submit}\n                type={\"submit\"}\n              >\n                Valider\n              </Button>\n            </div>\n          </form>\n        </Modal>\n      </div>\n      <div className={\"chart__container\"}>\n        <div className={\"chart__item\"}>\n          <Chart />\n        </div>\n        <div className={\"chart__item\"}>\n          <Chart2 />\n        </div>\n        <div className={\"chart__item\"}>\n          <Chart3 />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Client;\n"],"sourceRoot":""}